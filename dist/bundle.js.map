{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/constant.ts","webpack:///./src/index.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","DEFAULT_BASECONFIG","method","headers","fetch","globalConfig","configs","dynamicRouterPattern","version","createdBy","moduleApiInfo","globalApiInfo","request","url","data","dynamicRouterParams","isUseModule","Boolean","includes","moduleName","split","trim","pathName","targetConfig","find","item","Error","config","restConfig","_base","this","_preConfigs","_init","isDynamicRouter","dynamicRouter","toUpperCase","_data","_url","toString","entries","forEach","regArg","replace","RegExp","rule","params","transformRequest","result","ret","encodeURIComponent","substring","JSON","stringify","registerGlobal","apiConfig","registerModule","push","setHeader","rest","length","keys","CONSTANT","DEFAULT_DYNAMICROUTER_RPATTERN","DYNAMICROUTER_PATTERN_FLAG","MODULE_PATTERN"],"mappings":"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","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","import { RequestModuleConfig } from \"./type\";\n\n/**\n * 动态路由参数用来替换占位符的标志位，指定占位符标志位是字符串pattern\n */\nexport const DYNAMICROUTER_PATTERN_FLAG: string = \"pattern\";\n\n/**\n * 插件动态路由参数的默认占位符\n */\nexport const DEFAULT_DYNAMICROUTER_RPATTERN: string = `:${DYNAMICROUTER_PATTERN_FLAG}`;\n\n/**\n * 表明当前请求url是模块的占位符，默认为->\n */\nexport const MODULE_PATTERN: string = \"->\";\n\n/**\n * 插件的请求默认配置项\n */\nexport const DEFAULT_BASECONFIG: RequestModuleConfig = {\n    method: \"GET\",\n    headers: {\n        \"Content-Type\": \"application/x-www-form-urlencoded\"\n    }\n}","\n/**!\n * @name EasierAxios\n * @author Sumer.Liu\n * @since 2020/3/10\n * @license MIT\n */\nimport {\n    PreConfig,\n    RequestModuleConfig,\n    ApiConfig,\n    RequestConfig,\n    ModuleApiConfig,\n    RequestHandler,\n    ResponsePromise\n} from \"./type\";\nimport {\n    DEFAULT_DYNAMICROUTER_RPATTERN,\n    DYNAMICROUTER_PATTERN_FLAG,\n    MODULE_PATTERN,\n    DEFAULT_BASECONFIG\n} from \"./constant\";\n\nclass ApiModule {\n    private version: string = require(\"../package.json\").version;\n    private createdBy: string = \"sumerliu@github.com\";\n    private fetch: any;\n    private moduleApiInfo: ModuleApiConfig[] = [];\n    private globalApiInfo: ApiConfig = {};\n    private _preConfigs: PreConfig;\n    private globalConfig: RequestModuleConfig = {};\n\n    constructor(\n        fetch: RequestHandler,\n        globalConfig?: RequestModuleConfig,\n        configs: PreConfig = { dynamicRouterPattern: DEFAULT_DYNAMICROUTER_RPATTERN }\n    ) {\n        this.fetch = fetch;\n        this._preConfigs = configs;\n        this._init(globalConfig);\n    }\n\n    /**\n     * 初始化全局配置.\n     * \n     * @param globalConfig \n     */\n    private _init(globalConfig: RequestModuleConfig = {}) {\n        /* 用户传入的全局配置参数和默认参数合并 */\n        this.globalConfig = { ...DEFAULT_BASECONFIG, ...globalConfig };\n    }\n\n    /**\n     * axios核心方法\n     * \n     * @param url 请求地址\n     * @param data 请求体或URL拼接的query参数\n     * @param dynamicRouterParams URL拼接的动态路由参数 \n     * @param config 配置信息，默认是axios的配置项，支持额外1个参数dynamicRouter\n     */\n    private _base(\n        url: string,\n        data: any,\n        dynamicRouterParams: object,\n        config: RequestModuleConfig\n    ) {\n        const isDynamicRouter = Boolean(config.dynamicRouter);\n        const method = config.method.toUpperCase();\n        let _data = {}, _url = url;\n\n        /* 先区分是动态路由还是静态路由请求 */\n        if (isDynamicRouter) {\n            if (Object.prototype.toString.call(dynamicRouterParams) == \"[object Object]\") {\n                /* 将动态路由参数中的占位符替换成请求中的路由参数 */\n                Object.entries(dynamicRouterParams).forEach((item: any) => {\n                    const regArg = this._preConfigs.dynamicRouterPattern.replace(new RegExp(`${DYNAMICROUTER_PATTERN_FLAG}`, \"g\"), item[0]);\n                    const rule = new RegExp(`(${regArg})`, \"g\");\n                    _url = _url.replace(rule, item[1]);\n                })\n            }\n            else {\n                throw new Error(\"when you use dynamicRouter params request, data must be object\")\n            }\n        }\n\n        if (Boolean(data)) {\n            /**\n             * 如果data作为请求体信息传输，data可以是以下任意类型：\n             * - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams\n             * - 浏览器专属：FormData, File, Blob\n             * - Node 专属： Stream\n             **/\n            const NeedRequestBodyMethods = [\"PUT\", \"POST\", \"PATCH\"];\n            /* 再区分是传params(请求方式通过头部url的queryString),还是传data(请求方式通过请求体的data) */\n            _data = NeedRequestBodyMethods.includes(method)\n                ? { data }\n                : { params: data };\n        }\n\n        return this.fetch({\n            url: _url,\n            ..._data,\n            ...config,\n            /* 当method为PUT、POST和PATCH等时，只处理了json和form编码，将data以form或json编码格式传递。其余编码格式将不会对请求数据做任何处理！*/\n            transformRequest: [\n                (data: any) => {\n                    let result: any;\n                    const CONTENT_TYPE = config.headers[\"Content-Type\"];\n\n                    switch (CONTENT_TYPE) {\n                        case \"application/x-www-form-urlencoded\":\n                            let ret = \"\";\n                            for (let it in data) {\n                                ret += \"&\" + encodeURIComponent(it) + \"=\" + encodeURIComponent(data[it]);\n                            }\n                            result = ret.substring(1);\n                            break\n                        case \"application/json\":\n                            result = JSON.stringify(data);\n                            break\n                        default:\n                            result = data;\n                    }\n\n                    return result;\n                }\n            ]\n        });\n    }\n\n    /**\n     * 发出请求，实例方法而不是原型对象方法，为了可以单独调用request而不使this指向undefined报错。\n     * \n     * @param url apiConfig中的key名\n     * @param data 请求的内容，可以是请求头中的queryString键值对，也可以是请求体的内容\n     * @param dynamicRouterParams 动态路由参数，键值对。\n     * @param module 指定哪个模块。\n     */\n    public request = ({\n        url: name,\n        data,\n        dynamicRouterParams,\n        module\n    }: RequestConfig): ResponsePromise => {\n        /**\n         * 调用api函数时有两种模块config引入写法，一种是url中带->。一种是module字段声明，如果两种写法同时存在，module字段优先级更高\n         */\n        const isUseModule = Boolean(module) || name.includes(MODULE_PATTERN);\n        const moduleName = module || name.split(MODULE_PATTERN)[0].trim();\n        const pathName = (name.includes(MODULE_PATTERN) && name.split(MODULE_PATTERN)[1].trim()) || name;\n        const targetConfig = isUseModule\n            ? this.moduleApiInfo.find(item => item.name == moduleName).module\n            : this.globalApiInfo;\n\n        if (!Boolean(targetConfig[pathName])) {\n            throw new Error(\"could not find the request url, please check whether you register module\");\n        }\n\n        const { url, ...rest } = targetConfig[pathName];\n        /* 具体接口的配置参数和全局配置合并, headers因为是嵌套对象，所以需要单独合并 */\n        const { headers, ...restConfig } = rest;\n        let config = { ...this.globalConfig, ...restConfig };\n        config.headers = { ...config.headers, ...headers };\n        return this._base(url, data, dynamicRouterParams, config);\n    }\n\n    /**\n     * 注册全局config.\n     * \n     * @param apiConfig \n     */\n    registerGlobal(apiConfig: ApiConfig): ApiModule {\n        this.globalApiInfo = apiConfig;\n        return this;\n    }\n\n    /**\n     * 注册模块config，模块会自带命名空间，避免了命名冲突.\n     * \n     * @param name 必选，模块名\n     * @param module 必选，模块module的写法与apiConfig一致\n     */\n    registerModule({ name, module }: ModuleApiConfig): ApiModule {\n        if (Boolean(name) && typeof name == \"string\") {\n            this.moduleApiInfo.push({\n                name,\n                module\n            });\n            return this;\n        }\n        else {\n            throw new Error(\"if you use the module, the module name is necessary\");\n        }\n    }\n\n    /**\n     * 更新全局headers\n     * \n     * @param rest \n     */\n    setHeader(...rest: any): ApiModule {\n        if (rest.length == 1 && typeof rest == \"object\") {\n            for (const key of Object.keys(rest[0])) {\n                this.globalConfig.headers[key] = rest[0][key];\n            }\n        }\n        else if (rest.length == 2) {\n            this.globalConfig.headers[rest[0]] = rest[1];\n        }\n        else {\n            throw new Error(\"the maximum length of arguments is 2, if there is only one, it must be object \");\n        }\n        return this;\n    }\n}\n\nexport const CONSTANT = {\n    DEFAULT_DYNAMICROUTER_RPATTERN,\n    DYNAMICROUTER_PATTERN_FLAG,\n    MODULE_PATTERN,\n    DEFAULT_BASECONFIG\n};\nexport default ApiModule;"],"sourceRoot":""}